{"version":3,"sources":["my_great_place_styles.js","MyGreatPlace.js","SimpleMap.js","serviceWorker.js","index.js"],"names":["greatPlaceStyle","position","width","height","left","top","border","borderRadius","backgroundColor","textAlign","color","fontSize","fontWeight","padding","MyGreatPlace","style","Component","parseCoords","coords","latlon","slice","split","parseFloat","gotCorona","url","username","xmlhttp","XMLHttpRequest","open","setRequestHeader","latitude","toString","longitude","send","console","log","responseText","SimpleMap","props","createTable","table","state","length","i","push","key","lat","lng","value","loggedIn","map","handleChange","bind","handleSubmit","toggleMap","coordState","event","this","setState","target","sendCoords","getCoords","preventDefault","newcoords","xmlHttp","onreadystatechange","readyState","status","isGeolocationAvailable","isGeolocationEnabled","display","marginTop","marginBottom","onSubmit","type","onChange","onClick","bootstrapURLKeys","defaultCenter","defaultZoom","coordsList","defaultProps","center","zoom","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bf6a9607.chunk.js","sourcesContent":["const K_WIDTH = 40;\nconst K_HEIGHT = 40;\n\nconst greatPlaceStyle = {\n  // initially any map object has left top corner at lat lng coordinates\n  // it's on you to set object origin to 0,0 coordinates\n  position: 'absolute',\n  width: K_WIDTH,\n  height: K_HEIGHT,\n  left: -K_WIDTH / 2,\n  top: -K_HEIGHT / 2,\n\n  border: '5px solid #f44336',\n  borderRadius: K_HEIGHT,\n  backgroundColor: 'white',\n  textAlign: 'center',\n  color: '#3f51b5',\n  fontSize: 16,\n  fontWeight: 'bold',\n  padding: 4\n};\n\nexport {greatPlaceStyle};","  \nimport React, {Component} from 'react';\n\nimport {greatPlaceStyle} from './my_great_place_styles.js';\n\nexport default class MyGreatPlace extends Component {\n  // static propTypes = {\n  //   text: PropTypes.string\n  // };\n\n  // static defaultProps = {};\n\n\n  render() {\n    return (\n       <div style={greatPlaceStyle}>\n          Case here.\n       </div>\n    );\n  }\n}","\n\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport { geolocated } from \"react-geolocated\";\nimport MyGreatPlace from './MyGreatPlace.js';\n\n\n//Sends current coordinates to url\n// eslint-disable-next-line\nfunction sendCoords(coords, url, username) {\n  var xmlhttp = new XMLHttpRequest();\n  xmlhttp.open(\"POST\", url);  \n  xmlhttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n  xmlhttp.setRequestHeader(\"Purpose\", \"login\");\n  xmlhttp.setRequestHeader(\"Username\", username);\n  xmlhttp.setRequestHeader(\"Coords\", coords.latitude.toString() + ' ' + coords.longitude.toString());\n  xmlhttp.send(coords.latitude.toString() + ' ' + coords.longitude.toString());\n  console.log(xmlhttp.responseText);\n\tconsole.log(\"sent: \" + coords.latitude.toString() + ' ' + coords.longitude.toString());\n}\n//Formats coordinates for rendering\nfunction parseCoords(coords) {\n  var latlon = coords.slice(1, -1).split(', ');\n  var lat = parseFloat(latlon[0]);\n  var lon = parseFloat(latlon[1]);\n  return {\n    \"latitude\": lat,\n    \"longitude\": lon\n  };\n}\nfunction gotCorona(coords, url, username) {\n  var xmlhttp = new XMLHttpRequest();\n  xmlhttp.open(\"POST\", url);  \n  xmlhttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n  xmlhttp.setRequestHeader(\"Purpose\", \"gotCorona\");\n  xmlhttp.setRequestHeader(\"Username\", username);\n  xmlhttp.setRequestHeader(\"Coords\", coords.latitude.toString() + ' ' + coords.longitude.toString());\n  xmlhttp.send(coords.latitude.toString() + ' ' + coords.longitude.toString());\n  console.log(xmlhttp.responseText);\n\tconsole.log(\"sent: \" + coords.latitude.toString() + ' ' + coords.longitude.toString());\n}\n//Formats coordinates for rendering\n\nfunction wait(ms){\n  var start = new Date().getTime();\n  var end = start;\n  console.log(end);\n  while(end < start + ms) {\n    end = new Date().getTime();\n }\n}\n//Sends a request to the server in order to get coordinates of every point\n// async function getCoords(coords, url) {\n//   var newcoords;\n//   var xmlHttp = new XMLHttpRequest();\n//     xmlHttp.onreadystatechange = function() { \n//         if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {\n//             newcoords = xmlHttp.responseText.split(\"\\n\");\n//             for (var i=0; i<newcoords.length; i++) {\n//               newcoords[i] = parseCoords(newcoords[i]);\n//             }\n//             SimpleMap.createPoints(url, newcoords);\n//           }\n//       }\n//     xmlHttp.open(\"GET\", \"https://RawPythonTest.r2dev2bb8.repl.co\", true); \n//     xmlHttp.setRequestHeader(\"coords\", \"37.5042267 -121.9643745\");\n//     xmlHttp.send(\"37.5042267 -121.9643745\");\n//     // return newcoords;\n// }\n// Not used -> form posting \n// xmlhttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded;charset=UTF-8\");\n\nclass SimpleMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: '', loggedIn: false, map: false};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleMap = this.toggleMap.bind(this);\n\n    //sendCoords({latitude:  37.5042267, longitude:  -121.9643745} ,\"https://RawPythonTest.r2dev2bb8.repl.co\");\n    SimpleMap.state = {map: false, latitude: 0.0, longitude: 0.0, coords: [], coordState: false};\n    //this.getCoords({latitude: 37.5042267, longitude: -121.9643745 }, \"https://RawPythonTest.r2dev2bb8.repl.co\");\n  }\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n  handleSubmit(event) {\n    sendCoords(this.props.coords ,\"https://RawPythonTest.r2dev2bb8.repl.co\", this.state.value);\n    this.setState({loggedIn: true});\n    this.getCoords(this.props.coords, \"https://RawPythonTest.r2dev2bb8.repl.co\", this.state.value);\n    event.preventDefault();\n  }\n  toggleMap() {\n    this.setState({map: true});\n  }\n  // create points on maps\n  setCoordState(coords) {\n    this.setState(coords, coords);\n  }\n   getCoords(coords, url, username) {\n    console.log(coords);\n    var newcoords;\n    var xmlHttp = new XMLHttpRequest();\n      xmlHttp.onreadystatechange = function() {\n        \n        if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {\n            newcoords = xmlHttp.responseText.split(\"\\n\");\n              for (var i=0; i<newcoords.length; i++) {\n                newcoords[i] = parseCoords(newcoords[i]);\n                SimpleMap.state.coords.push(newcoords[i]);\n              }\n            console.log(SimpleMap.state.coords);\n            SimpleMap.state.coordState = true;\n          }\n      }\n      // xmlHttp.onreadystatechange = function() { \n      //     if (xmlHttp.readyState == 4 && xmlHttp.status == 200) {\n      //         newcoords = xmlHttp.responseText.split(\"\\n\");\n      //           for (var i=0; i<newcoords.length; i++) {\n      //             newcoords[i] = parseCoords(newcoords[i]);\n      //             SimpleMap.state.coords.push(newcoords[i]);\n      //           }\n             \n              \n              \n      //       }\n      //   }\n      xmlHttp.open(\"GET\", \"https://RawPythonTest.r2dev2bb8.repl.co\", true); \n      //xmlHttp.setRequestHeader(\"coords\", coords.latitude.toString() + \" \" + coords.longitude.toString());\n      xmlHttp.setRequestHeader(\"Username\", username)\n      xmlHttp.send(null);\n      // if (SimpleMap.state.coords.length > 0) {\n      //   return true;\n      // }\n      // return false;\n      // return newcoords;\n  }\n  static createPoints(url, coords) {\n      var coordsList = coords;\n      for (var i = 0; i< coordsList.length + 1; i++) {\n        \n        SimpleMap.state.coords.push(<MyGreatPlace lat={coordsList[i].latitude} lng={coordsList[i].longitude} />);\n      }\n      // console.log(SimpleMap.state.coords);// SimpleMap.state.coords = coordsTable;\n      \n      \n\n  }\n  createTable = () => {\n    let table = []\n    // console.log(coordsList);\n    \n    // this.getCoords(this.props.coords, \"https://RawPythonTest.r2dev2bb8.repl.co\");\n\n    // setTimeout(function() {\n    //   console.log(SimpleMap.state.coords);\n    //   // for (var i = 0; i < 4; i++) {\n    //   //   //Create the parent and add the childrene\n    //   //   // table.push(<MyGreatPlace lat={coordsList.props.lat} lng={coordsList.props.lng} />);\n    //   //   table.push(<MyGreatPlace lat={37.5042267 + i } lng={-121.9643745 + i} />);\n        \n    //   // }\n  \n    // }, 500);\n    console.log(SimpleMap.state.coords.length);\n    for (var i = 0; i < SimpleMap.state.coords.length; i++) {\n      //Create the parent and add the childrene\n      // table.push(<MyGreatPlace lat={coordsList.props.lat} lng={coordsList.props.lng} />);\n      table.push(<MyGreatPlace key={i} lat={SimpleMap.state.coords[i].latitude} lng={SimpleMap.state.coords[i].longitude} />);\n      console.log(\"Coords: Latitude - \" + SimpleMap.state.coords[i].latitude.toString() + \" Longitude - \" + SimpleMap.state.coords[i].longitude.toString());\n      \n      \n    }\n    console.log(table);\n    \n    return table;\n    // console.log(SimpleMap.state.coords);\n    // // Outer loop to create parent\n    // for (var i = 0; i < 4; i++) {\n    //   //Create the parent and add the childrene\n    //   // table.push(<MyGreatPlace lat={coordsList.props.lat} lng={coordsList.props.lng} />);\n    //   table.push(<MyGreatPlace lat={37.5042267 + i } lng={-121.9643745 + i} />);\n      \n    // }\n    // return table\n  }\n\n  static defaultProps = {\n    center: {\n      lat: 0,\n      lng: 0,\n    },\n    zoom: 11\n  };\n  \n  render() {\n    // testing code\n    // Geolocation.getCurrentPosition(\n    //   position => {\n    //     this.setState({latitude: position.coords.latitude, longitude: position.coords.longitude});\n    //     sendCoords(this.state, \"https://RawPythonTest.r2dev2bb8.repl.co\");\n    //   })\n    // this.setState({latitude: this.props.latitude, longitude: this.props.longitude});\n    // if (this.props.coords)  {\n    //   sendCoords(this.props.coords, \"https://RawPythonTest.r2dev2bb8.repl.co\");\n    //   console.log(getCoords(this.prop]\n   \n    return !this.props.isGeolocationAvailable ? (\n      <div>Your browser does not support Geolocation</div>\n  ) : !this.props.isGeolocationEnabled ? (\n      <div>Geolocation is not enabled</div>\n  ) : this.props.coords && !this.state.loggedIn ? (\n\n      // Important! Always set the container height explicitly\n      <div style={{ height: '100vh', width: '100%' , textAlign: 'center', display: 'flex', marginTop:'auto', marginBottom:'auto'}}>\n        <h1>Welcome to <b>CoronaSafe.</b></h1>\n        <form onSubmit={this.handleSubmit}>\n        <label>\n          Username:\n          <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n        \n      </div>\n  ) : this.props.coords && this.state.loggedIn && !this.state.map ? (\n    <div style={{ height: '100vh', width: '100%' , textAlign: 'center', marginTop: 'auto', marginBottom: 'auto'}}>\n      <h1>Welcome to CoronaSafe, {this.state.value}.</h1>\n      <button onClick={this.toggleMap}>Show Map</button>\n    </div>\n  ) : this.props.coords && this.state.loggedIn && this.state.map ? ( \n    <div style={{ height: '100vh', width: '100%' , textAlign: 'center', marginTop: 'auto', marginBottom: 'auto'}}>\n      <h1>Welcome to CoronaSafe, {this.state.value}.</h1>\n      <h2>Cases near you below...</h2>\n      <button onClick={gotCorona(this.props.coords,\"https://RawPythonTest.r2dev2bb8.repl.co\", this.state.value)}>I Got Corona</button>\n      <GoogleMapReact\n          bootstrapURLKeys={{key: \"AIzaSyDTz5KwujIjzE6RRCnaJ5ZoZSroy4vdz-0\"}}\n          defaultCenter={{lat: this.props.coords.latitude, lng: this.props.coords.longitude}}\n          defaultZoom={14}\n        >\n       {this.createTable()}\n       {/* <MyGreatPlace lat={this.props.coords.latitude} lng={this.props.coords.longitude} />  */}\n          {/* {this.createTable(SimpleMap.state.coords)} */}\n          {/* {this.getCoords(this.props.coords, \"https://RawPythonTest.r2dev2bb8.repl.co\")} */}\n          {/* {this.getCoords(this.props.coords, \"https://RawPythonTest.r2dev2bb8.repl.co\")} */}\n          {/* {this.createTable()} */}\n          {/* <AnyReactComponent\n            lat={this.state.latitude}\n            lng={this.state.longitude}\n            text=\"My Marker\"\n          />  */}\n        </GoogleMapReact>\n    </div>\n  ) : (\n        <div>Getting the location data&hellip; </div>\n    );\n  }\n}\n\nexport default geolocated({\n  positionOptions: {\n      enableHighAccuracy: false,\n  },\n  userDecisionTimeout: 5000,\n})(SimpleMap);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SimpleMap from './SimpleMap';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SimpleMap />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}